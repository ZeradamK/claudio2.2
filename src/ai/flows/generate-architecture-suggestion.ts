// This file is generated by Firebase Studio.
'use server';
/**
 * @fileOverview A cloud architecture suggestion AI agent.
 *
 * - generateArchitectureSuggestion - A function that handles the architecture suggestion process.
 * - GenerateArchitectureSuggestionInput - The input type for the generateArchitectureSuggestion function.
 * - GenerateArchitectureSuggestionOutput - The return type for the generateArchitectureSuggestion function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';
import { withExponentialBackoff } from '@/utils/retry-helpers';

const GenerateArchitectureSuggestionInputSchema = z.object({
  problemStatement: z.string().describe('The technical problem statement to generate an architecture for.'),
});
export type GenerateArchitectureSuggestionInput = z.infer<typeof GenerateArchitectureSuggestionInputSchema>;

const GenerateArchitectureSuggestionOutputSchema = z.object({
  architectureSuggestion: z.string().describe('The suggested cloud-native microservices architecture in JSON format compatible with React Flow.'),
  rationale: z.string().describe('The rationale behind the architecture decisions.'),
  cdkCode: z.string().optional().describe('AWS CDK TypeScript code for the architecture.'),
});
export type GenerateArchitectureSuggestionOutput = z.infer<typeof GenerateArchitectureSuggestionOutputSchema>;

export async function generateArchitectureSuggestion(input: GenerateArchitectureSuggestionInput): Promise<GenerateArchitectureSuggestionOutput> {
  return generateArchitectureSuggestionFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateArchitectureSuggestionPrompt',
  input: {
    schema: z.object({
      problemStatement: z.string().describe('The technical problem statement to generate an architecture for.'),
    }),
  },
  output: {
    schema: z.object({
      architectureSuggestion: z.string().describe('The suggested cloud-native microservices architecture in JSON format compatible with React Flow.'),
      rationale: z.string().describe('The rationale behind the architecture decisions.'),
      cdkCode: z.string().optional().describe('AWS CDK TypeScript code for the architecture.'),
    }),
  },
  prompt: `You are an expert cloud solutions architect specializing in AWS cloud-native microservices architectures. 

You will use the following problem statement to generate a visual architecture diagram that shows how various AWS services connect to solve the problem.

## PROBLEM STATEMENT
{{{problemStatement}}}

## OUTPUT FORMAT

Your architectureSuggestion MUST be a VALID JSON string for a React Flow diagram. Follow these strict rules:

1. ONLY use double quotes (") for JSON properties and values, NEVER single quotes (').
2. Do NOT include any code comments like // or /* in the JSON.
3. Ensure ALL properties and values are properly quoted and separated.
4. Do NOT use any JavaScript expressions, only static values.
5. Ensure color values use hex notation like "#42a5f5" with double quotes.
6. If including boolean values (true/false), do NOT put quotes around them.
7. For numeric values, do NOT include quotes.

Generate a diagram structure like this:

\`\`\`
{
  "nodes": [
    {
      "id": "node-1",
      "type": "default",
      "position": { "x": 100, "y": 100 },
      "data": {
        "label": "Lambda Function",
        "service": "AWS Lambda",
        "description": "Processes API requests",
        "estCost": "$20/month",
        "faultTolerance": "High"
      },
      "style": { "background": "#42a5f5", "color": "#ffffff", "border": "1px solid #1976d2", "width": 180 }
    },
    {
      "id": "node-2",
      "type": "default",
      "position": { "x": 400, "y": 100 },
      "data": {
        "label": "DynamoDB",
        "service": "Amazon DynamoDB",
        "description": "Stores user data",
        "estCost": "$50/month",
        "faultTolerance": "High"
      },
      "style": { "background": "#5c6bc0", "color": "#ffffff", "border": "1px solid #3949ab", "width": 180 }
    }
  ],
  "edges": [
    {
      "id": "edge-1-2",
      "source": "node-1",
      "target": "node-2",
      "animated": true,
      "data": {
        "dataFlow": "User data storage and retrieval",
        "protocol": "HTTPS"
      },
      "style": { "stroke": "#ff9800" }
    }
  ]
}
\`\`\`

For the diagram:
- Create a sophisticated multi-tier AWS architecture based on the requirements
- Include at least 8-15 AWS services, with appropriate connections between them
- Position nodes in a logical flow (client tier → application tier → data tier)
- Include common patterns: load balancing, auto-scaling, fault-tolerance, multi-AZ
- Group related services together visually (position nearby services that work together)
- Include edge cases and security considerations
- Always add Amazon VPC and security groups for proper network isolation
- Include detailed metadata for each service and connection
- Use appropriate colors for different service categories
- Show data flows with animated edges

For rationale:
- Explain your architecture choices in clear markdown format
- Describe how data flows through the system
- Justify service selections
- Address scalability, security, and cost considerations

Do NOT include any explanation text inside the JSON itself - keep it strictly valid JSON.`,
});

const generateArchitectureSuggestionFlow = ai.defineFlow<
  typeof GenerateArchitectureSuggestionInputSchema,
  typeof GenerateArchitectureSuggestionOutputSchema
>({
  name: 'generateArchitectureSuggestionFlow',
  inputSchema: GenerateArchitectureSuggestionInputSchema,
  outputSchema: GenerateArchitectureSuggestionOutputSchema,
}, async input => {
  // Wrap the AI prompt call with exponential backoff
  return await withExponentialBackoff(
    async () => {
      const {output} = await prompt(input);
      return output!;
    },
    {
      maxRetries: 3,  // Try up to 3 additional times (4 total attempts)
      initialDelayMs: 1000,  // Start with a 1s delay
      maxDelayMs: 15000,  // Maximum delay of 15s
      retryStatusCodes: [429, 503, 502, 500] // Common error codes that warrant retry
    }
  );
});
